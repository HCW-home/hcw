# Generated by Django 5.2.5 on 2025-08-28 16:28

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0005_user_mobile_phone_numer'),
    ]

    operations = [
        migrations.AlterField(
            model_name='user',
            name='languages',
            field=models.ManyToManyField(blank=True, null=True, to='users.language'),
        ),
        migrations.AlterField(
            model_name='user',
            name='specialities',
            field=models.ManyToManyField(blank=True, null=True, to='users.speciality'),
        ),
        migrations.CreateModel(
            name='HealthMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measured_at', models.DateTimeField(help_text='When the measurements were taken')),
                ('height_cm', models.DecimalField(blank=True, decimal_places=2, help_text='Height in centimeters', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(280)])),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kilograms', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)])),
                ('waist_cm', models.DecimalField(blank=True, decimal_places=1, help_text='Waist circumference in centimeters', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(250)])),
                ('hip_cm', models.DecimalField(blank=True, decimal_places=1, help_text='Hip circumference in centimeters', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(250)])),
                ('body_fat_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Body fat percentage', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(80)])),
                ('systolic_bp', models.PositiveSmallIntegerField(blank=True, help_text='Systolic blood pressure in mmHg', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('diastolic_bp', models.PositiveSmallIntegerField(blank=True, help_text='Diastolic blood pressure in mmHg', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('heart_rate_bpm', models.PositiveSmallIntegerField(blank=True, help_text='Heart rate in beats per minute', null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(250)])),
                ('respiratory_rate', models.PositiveSmallIntegerField(blank=True, help_text='Respiratory rate in breaths per minute', null=True, validators=[django.core.validators.MinValueValidator(4), django.core.validators.MaxValueValidator(80)])),
                ('temperature_c', models.DecimalField(blank=True, decimal_places=2, help_text='Body temperature in °C', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(45)])),
                ('spo2_pct', models.PositiveSmallIntegerField(blank=True, help_text='Oxygen saturation (SpO2) in %', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)])),
                ('pain_score_0_10', models.PositiveSmallIntegerField(blank=True, help_text='Pain score (0 = none, 10 = worst possible)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('glucose_fasting_mgdl', models.DecimalField(blank=True, decimal_places=2, help_text='Fasting blood glucose in mg/dL', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(1000)])),
                ('glucose_random_mgdl', models.DecimalField(blank=True, decimal_places=2, help_text='Random blood glucose in mg/dL', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(1000)])),
                ('hba1c_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Hemoglobin A1c percentage', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(20)])),
                ('chol_total_mgdl', models.DecimalField(blank=True, decimal_places=2, help_text='Total cholesterol in mg/dL', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(500)])),
                ('hdl_mgdl', models.DecimalField(blank=True, decimal_places=2, help_text='HDL cholesterol in mg/dL', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(150)])),
                ('ldl_mgdl', models.DecimalField(blank=True, decimal_places=2, help_text='LDL cholesterol in mg/dL', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(300)])),
                ('triglycerides_mgdl', models.DecimalField(blank=True, decimal_places=2, help_text='Triglycerides in mg/dL', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(1000)])),
                ('creatinine_mgdl', models.DecimalField(blank=True, decimal_places=3, help_text='Serum creatinine in mg/dL', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(20)])),
                ('egfr_ml_min_1_73m2', models.DecimalField(blank=True, decimal_places=1, help_text='Estimated GFR in mL/min/1.73m²', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(200)])),
                ('bun_mgdl', models.DecimalField(blank=True, decimal_places=1, help_text='Blood urea nitrogen (BUN) in mg/dL', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(200)])),
                ('alt_u_l', models.DecimalField(blank=True, decimal_places=1, help_text='ALT (Alanine transaminase) in U/L', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)])),
                ('ast_u_l', models.DecimalField(blank=True, decimal_places=1, help_text='AST (Aspartate transaminase) in U/L', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)])),
                ('alp_u_l', models.DecimalField(blank=True, decimal_places=1, help_text='ALP (Alkaline phosphatase) in U/L', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)])),
                ('bilirubin_total_mgdl', models.DecimalField(blank=True, decimal_places=2, help_text='Total bilirubin in mg/dL', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('sodium_mmol_l', models.DecimalField(blank=True, decimal_places=1, help_text='Sodium in mmol/L', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(180)])),
                ('potassium_mmol_l', models.DecimalField(blank=True, decimal_places=2, help_text='Potassium in mmol/L', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('chloride_mmol_l', models.DecimalField(blank=True, decimal_places=1, help_text='Chloride in mmol/L', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(140)])),
                ('bicarbonate_mmol_l', models.DecimalField(blank=True, decimal_places=1, help_text='Bicarbonate in mmol/L', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(45)])),
                ('hemoglobin_g_dl', models.DecimalField(blank=True, decimal_places=1, help_text='Hemoglobin in g/dL', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(25)])),
                ('wbc_10e9_l', models.DecimalField(blank=True, decimal_places=1, help_text='White blood cell count (x10^9/L)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(200)])),
                ('platelets_10e9_l', models.DecimalField(blank=True, decimal_places=1, help_text='Platelet count (x10^9/L)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(2000)])),
                ('inr', models.DecimalField(blank=True, decimal_places=2, help_text='INR (International Normalized Ratio)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(10)])),
                ('crp_mg_l', models.DecimalField(blank=True, decimal_places=1, help_text='C-reactive protein (CRP) in mg/L', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('esr_mm_h', models.PositiveSmallIntegerField(blank=True, help_text='Erythrocyte sedimentation rate (ESR) in mm/h', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('tsh_miu_l', models.DecimalField(blank=True, decimal_places=2, help_text='Thyroid stimulating hormone (TSH) in mIU/L', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(200)])),
                ('t3_ng_dl', models.DecimalField(blank=True, decimal_places=1, help_text='Triiodothyronine (T3) in ng/dL', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(800)])),
                ('t4_ug_dl', models.DecimalField(blank=True, decimal_places=2, help_text='Thyroxine (T4) in µg/dL', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(30)])),
                ('urine_protein', models.BooleanField(blank=True, help_text='Urine protein presence (dipstick positive/negative)', null=True)),
                ('urine_glucose', models.BooleanField(blank=True, help_text='Urine glucose presence (dipstick positive/negative)', null=True)),
                ('urine_ketones', models.BooleanField(blank=True, help_text='Urine ketone presence (dipstick positive/negative)', null=True)),
                ('peak_flow_l_min', models.PositiveIntegerField(blank=True, help_text='Peak expiratory flow in L/min', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(1200)])),
                ('fev1_l', models.DecimalField(blank=True, decimal_places=2, help_text='FEV1 (Forced expiratory volume in 1 sec) in liters', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10)])),
                ('fvc_l', models.DecimalField(blank=True, decimal_places=2, help_text='FVC (Forced vital capacity) in liters', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10)])),
                ('phq9_score', models.PositiveSmallIntegerField(blank=True, help_text='PHQ-9 depression screening score (0–27)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(27)])),
                ('gad7_score', models.PositiveSmallIntegerField(blank=True, help_text='GAD-7 anxiety screening score (0–21)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(21)])),
                ('pregnant_test_positive', models.BooleanField(blank=True, help_text='Pregnancy test result (True = positive, False = negative)', null=True)),
                ('source', models.CharField(blank=True, help_text='Measurement source (manual, device, EHR import, etc.)', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Free text notes related to this measurement', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_health_metrics_creator', to=settings.AUTH_USER_MODEL)),
                ('measured_by', models.ForeignKey(blank=True, help_text='Clinician or device user who recorded the measurements (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_health_metrics', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-measured_at'],
                'indexes': [models.Index(fields=['user', 'measured_at'], name='users_healt_user_id_ecd1a1_idx')],
            },
        ),
    ]
