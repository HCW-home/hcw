"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv
from celery.schedules import crontab
from firebase_admin import initialize_app

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file, or switch to system
try:
    dotenv_path = os.path.join(BASE_DIR, '.env')
    load_dotenv(dotenv_path)
except Exception as e:
    print(f"Unable to load file: {dotenv_path}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Discord
DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
DISCORD_CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID")) if os.getenv("DISCORD_CHANNEL_ID") else None

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGOSECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.getenv('DEBUG') == 'True' else False

ALLOWED_HOSTS = [os.getenv('ALLOWED_HOST')]

EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT', 25)
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', False)
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

ACCOUNT_MAX_EMAIL_ADDRESSES = 1

# Application definition

INSTALLED_APPS = [
    "daphne",
    "unfold",
    "unfold.contrib.filters",
    "unfold.contrib.forms",
    "unfold.contrib.inlines",
    "unfold.contrib.import_export",
    "unfold.contrib.guardian",
    "unfold.contrib.simple_history",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'allauth',
    'allauth.account',
    'django_filters',
    'allauth.socialaccount',
    'dj_rest_auth.registration',
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'rest_framework_simplejwt',
    'drf_spectacular',
    'django_celery_results',
    'fcm_django',
    'consultations',
    'users',
    'organisations',
    'messaging',
    'mediaserver',
    'api',
    'configuration',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware'
]

ASGI_APPLICATION = "core.asgi.application"

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
MEDIA_ROOT = os.getenv('MEDIA_ROOT', 'upload')
MEDIA_URL = '/upload/'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = "optional"
AUTH_USER_MODEL = 'users.User'

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': '_auth',
    'JWT_AUTH_REFRESH_COOKIE': '_refresh',
    'JWT_AUTH_HTTPONLY': False,
    'USER_DETAILS_SERIALIZER': 'users.serializers.UserDetailsSerializer',
    'REGISTER_SERIALIZER': 'users.serializers.RegisterSerializer',
}

LOGIN_REDIRECT_URL = '/home/'

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'oauth2'
        }
    },
    'USE_SESSION_AUTH': False

}

SPECTACULAR_SETTINGS = {
    'TITLE': 'HCW@Home API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    "COMPONENTS": {
        "securitySchemes": {
            "bearerAuth": {  # OpenAPI 3
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
            }
        }
    },
    "SECURITY": [{"bearerAuth": []}],  # apply globally
    "SWAGGER_UI_SETTINGS": {
        "persistAuthorization": True,  # <-- keep JWT after refresh
        # "tryItOutEnabled": True,     # optional
    },
}

SOCIALACCOUNT_PROVIDERS = {
    "openid_connect": {
        "APPS": [
            {
                "provider_id": os.getenv('OPENID_ID'),
                "name": os.getenv('OPENID_NAME'),
                "client_id": os.getenv('OPENID_CLIENT_ID'),
                "secret": os.getenv('OPENID_SECRET'),
                "settings": {
                    "server_url": os.getenv('OPENID_CONFIGURATION_URL'),
                },
            }
        ]
    }
}

SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

REDIS_HOST = os.getenv('REDIS_HOST') or '127.0.0.1'
REDIS_PORT = os.getenv('REDIS_PORT') or '6379'

CELERY_BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/0"
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'

CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_EXTENDED = True
CELERY_TASK_TRACK_STARTED = True

ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True

MOBULA_API_KEY = os.getenv('MOBULA_API_KEY')

ALEPHIUM_RPC_URL = 'https://node.mainnet.alephium.org'
ALEPHIUM_EXPLORER_URL = 'https://backend.mainnet.alephium.org'

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache" if not DEBUG else 'django.core.cache.backends.dummy.DummyCache',
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}",
    }
}
STATIC_ROOT = os.getenv('STATIC_ROOT', 'statics')

CELERY_BEAT_SCHEDULE = {
    # 'run_all': {
    #     'task': 'module.tasks.run_all',
    #     'schedule': crontab(minute=0, hour='*'),
    # },
}

FIREBASE_APP = initialize_app()

FCM_DJANGO_SETTINGS = {
    "ONE_DEVICE_PER_USER": False,
    "DELETE_INACTIVE_DEVICES": True,
    "FCM_DEVICE_MODEL": "users.FCMDeviceOverride",
}

ALEPHIUM_NODE = os.getenv('ALEPHIUM_NODE')
ALEPHIUM_EXPLORER = os.getenv('ALEPHIUM_EXPLORER')
ALEPHIUM_PUBLIC_EXPLORER = os.getenv('ALEPHIUM_PUBLIC_EXPLORER')

ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY')

# Janus Media Server Configuration
JANUS_TURN_SERVER = os.getenv('JANUS_TURN_SERVER', 'turn:demo.hcw-at-home.com')
JANUS_TURN_USERNAME = os.getenv('JANUS_TURN_USERNAME', 'iabsis')
JANUS_TURN_PASSWORD = os.getenv('JANUS_TURN_PASSWORD', 'pfcqopfs')

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, 6379)],
        },
    },
}

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Unfold Admin Configuration
UNFOLD = {
    "SITE_TITLE": "HCW@Home Admin",
    "SITE_HEADER": "HCW@Home Administration",
    "SITE_URL": "/",
    "SITE_ICON": {
        "light": lambda request: "/static/users/img/logo-full.svg",
        "dark": lambda request: "/static/users/img/logo-full.svg",
    },
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
        "navigation": [
            {
                "title": "Navigation",
                "separator": True,
                "items": [
                    {
                        "title": "Dashboard",
                        "icon": "dashboard",
                        "link": "/admin/",
                    },
                ],
            },
            {
                "title": "Users & Authentication",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": "Users",
                        "icon": "people",
                        "link": "/admin/users/user/",
                        "permission": lambda request: request.user.has_perm("users.view_user"),
                    },
                    {
                        "title": "Health Metric",
                        "icon": "people",
                        "link": "/admin/users/healthmetric/",
                        "permission": lambda request: request.user.has_perm("users.view_healthmetric"),
                    },
                    {
                        "title": "Groups",
                        "icon": "group",
                        "link": "/admin/auth/group/",
                        "permission": lambda request: request.user.has_perm("auth.view_group"),
                    },
                    {
                        "title": "Organizations",
                        "icon": "business",
                        "link": "/admin/organisations/organisation/",
                        "permission": lambda request: request.user.has_perm("organisations.view_organisation"),
                    },
                    {
                        "title": "Languages",
                        "icon": "language",
                        "link": "/admin/users/language/",
                        "permission": lambda request: request.user.has_perm("users.view_language"),
                    },
                    {
                        "title": "Specialities",
                        "icon": "medical_services",
                        "link": "/admin/users/speciality/",
                        "permission": lambda request: request.user.has_perm("users.view_speciality"),
                    },
                    {
                        "title": "Notifications",
                        "icon": "notifications",
                        "link": "/admin/users/notification/",
                        "permission": lambda request: request.user.has_perm("users.view_notification"),
                    },
                    {
                        "title": "FCM Devices",
                        "icon": "phone_android",
                        "link": "/admin/users/fcmdeviceoverride/",
                        "permission": lambda request: request.user.has_perm("users.view_fcmdeviceoverride"),
                    },
                ],
            },
            {
                "title": "Consultations",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": "Consultations",
                        "icon": "event",
                        "link": "/admin/consultations/consultation/",
                        "permission": lambda request: request.user.has_perm("consultations.view_consultation"),
                    },
                    {
                        "title": "Groups",
                        "icon": "group_work",
                        "link": "/admin/consultations/group/",
                        "permission": lambda request: request.user.has_perm("consultations.view_group"),
                    },
                    {
                        "title": "Appointments",
                        "icon": "schedule",
                        "link": "/admin/consultations/appointment/",
                        "permission": lambda request: request.user.has_perm("consultations.view_appointment"),
                    },
                    {
                        "title": "Messages",
                        "icon": "message",
                        "link": "/admin/consultations/message/",
                        "permission": lambda request: request.user.has_perm("consultations.view_message"),
                    },
                    {
                        "title": "Reasons",
                        "icon": "list",
                        "link": "/admin/consultations/reason/",
                        "permission": lambda request: request.user.has_perm("consultations.view_reason"),
                    },
                    {
                        "title": "Requests",
                        "icon": "inbox",
                        "link": "/admin/consultations/request/",
                        "permission": lambda request: request.user.has_perm("consultations.view_request"),
                    },
                    {
                        "title": "Booking slot",
                        "icon": "inbox",
                        "link": "/admin/consultations/bookingslot/",
                        "permission": lambda request: request.user.has_perm("consultations.view_bookingslot"),
                    },
                ],
            },
            {
                "title": "Messaging",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": "Messaging Providers",
                        "icon": "message",
                        "link": "/admin/messaging/messagingprovider/",
                        "permission": lambda request: request.user.has_perm("messaging.view_messagingprovider"),
                    },
                ],
            },
            {
                "title": "Media & API",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": "Media Server",
                        "icon": "videocam",
                        "link": "/admin/mediaserver/server/",
                        "permission": lambda request: request.user.has_perm("mediaserver.view_server"),
                    },
                    {
                        "title": "Turn Server",
                        "icon": "router",
                        "link": "/admin/mediaserver/turn/",
                        "permission": lambda request: request.user.has_perm("mediaserver.view_turn"),
                    },
                ],
            },
            {
                "title": "Settings",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": "Configuration",
                        "icon": "settings",
                        "link": "/admin/configuration/configuration/",
                        "permission": lambda request: request.user.has_perm("configuration.view_configuration"),
                    },
                ],
            },
        ],
    },
}

# Default Configuration Values
DEFAULT_CONFIGURATIONS = {
    'site_name': {
        'value': 'HCW@Home',
        'description': 'The name of the application displayed to users',
    },
    'site_url': {
        'value': 'https://localhost:8000',
        'description': 'Base URL of the application',
    },
    'max_upload_size': {
        'value': '10485760',  # 10MB in bytes
        'description': 'Maximum file upload size in bytes',
    },
    'maintenance_mode': {
        'value': 'false',
        'description': 'Enable/disable maintenance mode (true/false)',
    },
    'contact_email': {
        'value': 'admin@example.com',
        'description': 'Contact email for support inquiries',
    },
    'session_timeout': {
        'value': '3600',  # 1 hour in seconds
        'description': 'Session timeout in seconds',
    },
    'enable_notifications': {
        'value': 'true',
        'description': 'Enable/disable push notifications (true/false)',
    },
}

# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in DEBUG mode
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = []
# Add specific origins here for production when DEBUG=False
# Example: 'https://yourdomain.com', 'https://www.yourdomain.com'
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

PRACTITIONER_URL = os.getenv('PRACTITIONER_URL', 'http://localhost:4200')
PATIENT_URL = os.getenv('PATIENT_URL', 'http://localhost:4201')
