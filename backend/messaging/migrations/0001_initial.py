# Generated by Django 5.2.6 on 2025-09-10 11:52

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='content')),
                ('subject', models.CharField(blank=True, max_length=200, verbose_name='subject')),
                ('communication_method', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('whatsapp', 'WhatsApp'), ('push', 'Push Notification'), ('manual', 'Manual')], default='sms', max_length=20, verbose_name='communication method')),
                ('provider_name', models.CharField(blank=True, max_length=50, verbose_name='provider name')),
                ('recipient_phone', models.CharField(blank=True, max_length=50, verbose_name='recipient phone')),
                ('recipient_email', models.EmailField(blank=True, max_length=254, verbose_name='recipient email')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('read', 'Read')], default='pending', max_length=20, verbose_name='status')),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('external_message_id', models.CharField(blank=True, max_length=200)),
                ('error_message', models.TextField(blank=True)),
                ('celery_task_id', models.CharField(blank=True, help_text='Celery task ID for async sending', max_length=255)),
                ('task_logs', models.TextField(blank=True, help_text='Logs from the sending task')),
                ('task_traceback', models.TextField(blank=True, help_text='Error traceback if task failed')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessagingProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Swisscom', 'Swisscom'), ('Ovh', 'Ovh'), ('ClickATel', 'ClickATel'), ('Twilio', 'Twilio'), ('Twilio Whatsapp', 'Twilio Whatsapp'), ('EMAIL', 'Email')], max_length=20, verbose_name='name')),
                ('api_key', models.CharField(max_length=200, verbose_name='API key')),
                ('source_phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='source phone')),
                ('auth_token', models.CharField(blank=True, max_length=50, null=True, verbose_name='auth token')),
                ('account_sid', models.CharField(blank=True, max_length=50, null=True, verbose_name='account SID')),
                ('priority', models.IntegerField(default=0, verbose_name='priority')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
            ],
            options={
                'verbose_name': 'messaging provider',
                'verbose_name_plural': 'messaging providers',
            },
        ),
        migrations.CreateModel(
            name='Prefix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_by', models.CharField(max_length=50, verbose_name='start by')),
            ],
            options={
                'verbose_name': 'prefix',
                'verbose_name_plural': 'prefixes',
            },
        ),
    ]
